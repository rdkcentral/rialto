/*
 * If not stated otherwise in this file or this component's LICENSE file the
 * following copyright and licenses apply:
 *
 * Copyright 2022 Sky UK
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @file IServerManagerService.h
 *
 * This file comprises the class definition of IServerManagerService.
 * An interface, which provides API of RialtoServerManager
 */

#ifndef RIALTO_SERVERMANAGER_SERVICE_I_SERVER_MANAGER_SERVICE_H_
#define RIALTO_SERVERMANAGER_SERVICE_I_SERVER_MANAGER_SERVICE_H_

#include "LoggingLevels.h"
#include "SessionServerCommon.h"
#include <string>

namespace rialto::servermanager::service
{
/**
 * @brief Represents API of RialtoServerManager
 *
 * This class represents all functionality of RialtoServerManager.
 */
class IServerManagerService
{
public:
    IServerManagerService() = default;
    virtual ~IServerManagerService() = default;

    IServerManagerService(const IServerManagerService &) = delete;
    IServerManagerService &operator=(const IServerManagerService &) = delete;
    IServerManagerService(IServerManagerService &&) = delete;
    IServerManagerService &operator=(IServerManagerService &&) = delete;

    /**
     * @brief Moves an application from NOT_RUNNING to ACTIVE or INACTIVE state
     *
     * This method causes a new RialtoSessionServer instance is spawned for the application in the requested state.
     * This API will return error if the application is already in the ACTIVE or INACTIVE state (the
     * changeSessionServerState() API should be used in this scenario).
     *
     * @param[in]     appId     : The ID of the application
     * @param[in]     state     : Desired state, cannot be NOT_RUNNING
     * @param[in]     appConfig : Configuration parameters for app
     *
     * @retval true on success.
     */
    virtual bool initiateApplication(const std::string &appId, const firebolt::rialto::common::SessionServerState &state,
                                     const firebolt::rialto::common::AppConfig &appConfig) = 0;

    /**
     * @brief Changes session server state
     *
     * This method requests an session server to change its state. This API will return an error if the application is
     * currently in the NOT_RUNNING state (in this scenario the initApplication() API should be used otherwise SetState
     * request is sent to RialtoSessionServer for the app.
     *
     * @param[in]     appId     : The ID of the application
     * @param[in]     state     : Desired state
     *
     * @retval true on success.
     */
    virtual bool changeSessionServerState(const std::string &appId,
                                          const firebolt::rialto::common::SessionServerState &state) = 0;

    /**
     * @brief Returns the name of a socket, which is used for RialtoSessionServer <-> Application communication
     *
     * This method returns the name of a socket, which is used for RialtoSessionServer <-> Application communication.
     * Socket name is generated by RialtoServerManager when RialtoSessionServer is spawned.
     *
     * @param[in]     appId     : The ID of an application
     *
     * @retval string with socket name
     */
    virtual std::string getAppConnectionInfo(const std::string &appId) const = 0;

    /**
     * @brief Sets logging level of rialto applications
     *
     * This method requests all rialto applications to set its logging level
     *
     * @param[in]     logLevels     : Log levels of rialto components
     *
     * @retval true on success.
     */
    virtual bool setLogLevels(const LoggingLevels &logLevels) const = 0;
};
} // namespace rialto::servermanager::service

#endif // RIALTO_SERVERMANAGER_SERVICE_I_SERVER_MANAGER_SERVICE_H_
