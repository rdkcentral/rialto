/*
 * If not stated otherwise in this file or this component's LICENSE file the
 * following copyright and licenses apply:
 *
 * Copyright 2022 Sky UK
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto2";

import "google/protobuf/descriptor.proto";
import "rialtoipc.proto";

package firebolt.rialto;

// You need this to generate the rpc service stubs
option cc_generic_services = true;

/**
 * @fn int getSharedMemoryFd()
 *
 * @brief Request the shared memory buffer file descriptor from the server.
 *
 * There is only one shared buffer per application. The file descriptor needs to be closed by
 * the caller when no longer needed.
 *
 * @returns The file descriptor to be mmapped by the client.
 */
message GetSharedMemoryRequest {
}
message GetSharedMemoryResponse {
    required int32 fd = 1 [(rialto.ipc.field_is_fd) = true];
    required uint32 size = 2;
}

/**
 * @brief Event sent by the server when it changes its state
 *
 * @param session_id        The id of the A/V session the request is for.
 *
 */
message ApplicationStateChangeEvent {

    enum ApplicationState {
        UNKNOWN  = 0;        ///< State of RialtoServer is not known
        RUNNING  = 1;        ///< State of RialtoServer is Active
        INACTIVE = 2;        ///< State of RialtoServer is Inactive or NotRunning
    }

    required ApplicationState application_state = 1;
}

service RialtoControlModule {

    /**
     * @brief Gets the shared memory file descriptor to be mmapped by the client.
     * @see GetSharedMemoryRequest
     */
    rpc getSharedMemory(GetSharedMemoryRequest) returns (GetSharedMemoryResponse) {
    }

}
