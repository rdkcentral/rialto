/*
 * If not stated otherwise in this file or this component's LICENSE file the
 * following copyright and licenses apply:
 *
 * Copyright 2022 Sky UK
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto2";

import "google/protobuf/descriptor.proto";
import "rialtoipc.proto";

package firebolt.rialto;

// You need this to generate the rpc service stubs
option cc_generic_services = true;

/**
 * @fn int getSharedMemoryFd()
 *
 * @brief Request the shared memory buffer file descriptor from the server.
 *
 * There is only one shared buffer per application. The file descriptor needs to be closed by
 * the caller when no longer needed.
 *
 * @returns The file descriptor to be mmapped by the client.
 */
message GetSharedMemoryRequest {
}
message GetSharedMemoryResponse {
    required int32 fd = 1 [(rialto.ipc.field_is_fd) = true];
    required uint32 size = 2;
}

/**
 * @brief Schema version
 *
 * @param[in] major  : The number determines, if schemas are compatibile.
 * @param[in] minor  : The number determines, if public API or proto schema is the same.
 * @param[in] patch  : The number determines, if implementation has the same version.
 *
 */
 message SchemaVersion {
    optional uint32 major = 1;
    optional uint32 minor = 2;
    optional uint32 patch = 3;
 }

/**
 * @brief Register new client
 *
 * @param[in] client_schema_version  : The version of protobuf interface used by client.
 *
 * @returns The control handle and version of protobuf interface used by server.
 */
message RegisterClientRequest {
    optional SchemaVersion client_schema_version = 1;
}
message RegisterClientResponse {
    required int32 control_handle = 1;
    optional SchemaVersion server_schema_version = 2;
}

/**
 * @fn void ack()
 * 
 * @brief Acknowledgement of a received ping request
 *
 * @param[in] control_handle  : The handle id.
 * @param[in] id              : id received in ping notification
 * 
 */
message AckRequest {
    required int32 control_handle = 1;
    required int32 id = 2;
}
message AckResponse {
}

/**
 * @brief Event sent by the server when it changes its state
 *
 * @param control_handle        The handle id.
 * @param application_state     The new state of application
 *
 */
message ApplicationStateChangeEvent {

    enum ApplicationState {
        UNKNOWN  = 0;        ///< State of RialtoServer is not known
        RUNNING  = 1;        ///< State of RialtoServer is Active
        INACTIVE = 2;        ///< State of RialtoServer is Inactive or NotRunning
    }

    required int32 control_handle = 1;
    required ApplicationState application_state = 2;
}

/**
 * @brief Ping notification for checking system health
 * The client should perform any health checks then respond with
 * a call to ack(id) if system healthy
 *
 * @param[in] id  : Unique id, should be passed to corresponding ack call
 */
message PingEvent {
    required int32 control_handle = 1;
    required int32 id = 2;
}

service ControlModule {

    /**
     * @brief Gets the shared memory file descriptor to be mmapped by the client.
     * @see GetSharedMemoryRequest
     */
    rpc getSharedMemory(GetSharedMemoryRequest) returns (GetSharedMemoryResponse) {
    }

    /**
     * @brief Registers new client
     * @see RegisterClientRequest
     */
    rpc registerClient(RegisterClientRequest) returns (RegisterClientResponse) {
    }

    /**
     * @brief Acknowledgement of a received ping request
     * @see AckRequest
     */
    rpc ack(AckRequest) returns (AckResponse) {
    }

}
