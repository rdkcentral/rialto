/*
 * If not stated otherwise in this file or this component's LICENSE file the
 * following copyright and licenses apply:
 *
 * Copyright 2022 Sky UK
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto2";

import "google/protobuf/descriptor.proto";

package firebolt.rialto;

// You need this to generate the rpc service stubs
option cc_generic_services = true;

/**
 * @fn vector<string> getSupportedKeySystems()
 * @brief Returns the EME key systems supported by Rialto.
 *
 * @returns The supported key systems.
 */
message GetSupportedKeySystemsRequest {
}
message GetSupportedKeySystemsResponse {
  repeated string key_systems = 1;
}

/**
 * @fn bool supportsKeySystem(const std::string &keySystem)
 * @brief Indicates if the specified key system is supported.
 *
 * @param[in]  key_system   The key system to check.
 *
 * @returns true if supported.
 */
message SupportsKeySystemRequest {
  optional string key_system = 1;
}
message SupportsKeySystemResponse {
  optional bool is_supported = 1;
}

/**
 * @fn bool, string getSupportedKeySystemVersion(const std::string &keySystem)
 * @brief Returns version of supported key system.
 *
 * @param[in]  key_system   The key system to get the version supported.
 *
 * @returns the version supported.
 */
message GetSupportedKeySystemVersionRequest {
  optional string key_system = 1;
}
message GetSupportedKeySystemVersionResponse {
  optional string version = 1;
}

service MediaKeysCapabilitiesModule {
    /**
     * @brief Returns the EME key systems supported by Rialto.
     * @see GetSupportedKeySystemsRequest
     */
    rpc getSupportedKeySystems(GetSupportedKeySystemsRequest) returns (GetSupportedKeySystemsResponse) {
    }

    /**
     * @brief Indicates if the specified key system is supported.
     * @see SupportsKeySystemRequest
     */
    rpc supportsKeySystem(SupportsKeySystemRequest) returns (SupportsKeySystemResponse) {
    }

    /**
     * @brief Returns version of supported key system.
     * @see GetSupportedKeySystemVersionRequest
     */
    rpc getSupportedKeySystemVersion(GetSupportedKeySystemVersionRequest) returns (GetSupportedKeySystemVersionResponse) {
    }
}