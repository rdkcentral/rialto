#
# If not stated otherwise in this file or this component's LICENSE file the
# following copyright and licenses apply:
#
# Copyright 2022 Sky UK
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# This workflow builds and runs the rialto unittests. The workflow shall fail if any test fails
# and the results of the tests are checked and displayed in github. Logs are uploaded on failure.

name: client_component_tests

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master", "rdkcentral:master" ]
  pull_request:
    branches: [ "master", "rdkcentral:master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  # This job sets up the repo with the dependancies then runs the client component tests
  run-client-test:
    name: Build and test ipc unittests

    # Runs on ubuntu
    runs-on: ubuntu-22.04

    # Timeout after
    timeout-minutes: 10

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: checkout repo
        uses: actions/checkout@v3

      # Initialises the host ready to run component tests
      - name: Initialise host
        uses: ./.github/workflows/actions/init_ut

      # Run the build script for client
      - name: build_ct.py script client
        run: |
              python build_ct.py -c -xml -f -cov -s ipc

      # Processes the results of the unittests and the lcov output
      - name: Process output
        uses: ./.github/workflows/actions/process_results_ut
        if: success() || failure()
        with:
          suite: 'ipc'

      # Cache lcov output
      - name: Cache client component tests interface stats
        id: cache-client-component-coverage-stats
        uses: actions/cache@v3
        if: success()
        with:
          path: build/coverage_statistics_public_apis.info
          key: ${{ runner.os }}-client-component-coverage-stats-${{ github.run_id }}-${{ github.run_number }}

      # Upload coverage report on success
      - name: Upload Coverage Report
        uses: actions/upload-artifact@v3
        if: success()
        with:
          name: coverage_report_component
          path: build/gh_pages/coverage_report

      # Upload coverage statistics on success
      - name: Upload Coverage Statistics
        uses: actions/upload-artifact@v3
        if: success()
        with:
          name: coverage_report_stats_component
          path: build/coverage_statistics.txt

      # Download current master coverage statistics
      - name: Download Master Coverage Statistics
        uses: dawidd6/action-download-artifact@v2
        if: ${{ success() && github.ref != 'refs/heads/master' }}
        with:
          workflow_conclusion: success
          branch: master
          name: coverage_report_stats_component
          path: master_artifacts
      
      # Run the process_coverage_stats script
      - name: Process Coverage Statistics
        if: ${{ success() && github.ref != 'refs/heads/master' }}
        run: python scripts/coverage/process_coverage_stats.py ./master_artifacts/coverage_statistics.txt build/coverage_statistics.txt

      # Get process_coverage_stats script output
      - id: get-comment-body
        if: ${{ success() && github.ref != 'refs/heads/master' }}
        run: |
          body="$(cat comparison_output.txt)"
          body="${body//'%'/'%25'}"
          body="${body//$'\n'/'%0A'}"
          body="${body//$'\r'/'%0D'}"
          echo "::set-output name=body::$body"

      # Create comment with coverage info
      - name: Create Coverage Comment
        if: ${{ success() && github.ref != 'refs/heads/master' }}
        uses: peter-evans/create-or-update-comment@v2
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: ${{ steps.get-comment-body.outputs.body }}


  # This job runs the coverage report
  # Will only check stats on PR not master
  check-interface-api-coverage:
    name: Checks the coverage statistics of the api interface

    # Runs on ubuntu
    runs-on: ubuntu-22.04

    # Timeout after
    timeout-minutes: 10

    needs: [run-client-test]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: checkout repo
        uses: actions/checkout@v3

      # Get cached lcov client component tests interface api stats
      - name: Get client component tests interface api stats
        id: cache-client-component-coverage-stats
        uses: actions/cache@v3
        if: ${{ github.ref != 'refs/heads/master' }}
        with:
          path: build/coverage_statistics_public_apis.info
          key: ${{ runner.os }}-client-component-coverage-stats-${{ github.run_id }}-${{ github.run_number }}

      # Run the process_coverage_stats script
      - name: Process Coverage Statistics
        if: ${{ success() && github.ref != 'refs/heads/master' }}
        run: python scripts/coverage/check_coverage_stats.py build/coverage_statistics_public_apis.info 8
